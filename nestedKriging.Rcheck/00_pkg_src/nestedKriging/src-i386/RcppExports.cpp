// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// versionInfo
Rcpp::List versionInfo(int outputLevel);
RcppExport SEXP _nestedKriging_versionInfo(SEXP outputLevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type outputLevel(outputLevelSEXP);
    rcpp_result_gen = Rcpp::wrap(versionInfo(outputLevel));
    return rcpp_result_gen;
END_RCPP
}
// nestedKrigingDirect
Rcpp::List nestedKrigingDirect(const arma::mat& X, const arma::vec& Y, const std::vector<signed long>& clusters, const arma::mat& x, const std::string covType, const arma::vec& param, const double sd2, const std::string krigingType, const std::string tagAlgo, const long numThreadsZones, const long numThreads, const int verboseLevel, const int outputLevel, const Rcpp::IntegerVector globalOptions, const arma::vec nugget);
RcppExport SEXP _nestedKriging_nestedKrigingDirect(SEXP XSEXP, SEXP YSEXP, SEXP clustersSEXP, SEXP xSEXP, SEXP covTypeSEXP, SEXP paramSEXP, SEXP sd2SEXP, SEXP krigingTypeSEXP, SEXP tagAlgoSEXP, SEXP numThreadsZonesSEXP, SEXP numThreadsSEXP, SEXP verboseLevelSEXP, SEXP outputLevelSEXP, SEXP globalOptionsSEXP, SEXP nuggetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::vector<signed long>& >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string >::type covType(covTypeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const double >::type sd2(sd2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type krigingType(krigingTypeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tagAlgo(tagAlgoSEXP);
    Rcpp::traits::input_parameter< const long >::type numThreadsZones(numThreadsZonesSEXP);
    Rcpp::traits::input_parameter< const long >::type numThreads(numThreadsSEXP);
    Rcpp::traits::input_parameter< const int >::type verboseLevel(verboseLevelSEXP);
    Rcpp::traits::input_parameter< const int >::type outputLevel(outputLevelSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type globalOptions(globalOptionsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type nugget(nuggetSEXP);
    rcpp_result_gen = Rcpp::wrap(nestedKrigingDirect(X, Y, clusters, x, covType, param, sd2, krigingType, tagAlgo, numThreadsZones, numThreads, verboseLevel, outputLevel, globalOptions, nugget));
    return rcpp_result_gen;
END_RCPP
}
// looErrors
Rcpp::List looErrors(const arma::mat& X, const arma::vec& Y, const std::vector<signed long>& clusters, const std::vector<signed long>& indices, const std::string covType, const arma::vec& param, const double sd2, const std::string krigingType, const std::string tagAlgo, const long numThreadsZones, const long numThreads, const int verboseLevel, const int outputLevel, const Rcpp::IntegerVector globalOptions, const arma::vec nugget, const std::string method);
RcppExport SEXP _nestedKriging_looErrors(SEXP XSEXP, SEXP YSEXP, SEXP clustersSEXP, SEXP indicesSEXP, SEXP covTypeSEXP, SEXP paramSEXP, SEXP sd2SEXP, SEXP krigingTypeSEXP, SEXP tagAlgoSEXP, SEXP numThreadsZonesSEXP, SEXP numThreadsSEXP, SEXP verboseLevelSEXP, SEXP outputLevelSEXP, SEXP globalOptionsSEXP, SEXP nuggetSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::vector<signed long>& >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< const std::vector<signed long>& >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type covType(covTypeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const double >::type sd2(sd2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type krigingType(krigingTypeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tagAlgo(tagAlgoSEXP);
    Rcpp::traits::input_parameter< const long >::type numThreadsZones(numThreadsZonesSEXP);
    Rcpp::traits::input_parameter< const long >::type numThreads(numThreadsSEXP);
    Rcpp::traits::input_parameter< const int >::type verboseLevel(verboseLevelSEXP);
    Rcpp::traits::input_parameter< const int >::type outputLevel(outputLevelSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type globalOptions(globalOptionsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type nugget(nuggetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(looErrors(X, Y, clusters, indices, covType, param, sd2, krigingType, tagAlgo, numThreadsZones, numThreads, verboseLevel, outputLevel, globalOptions, nugget, method));
    return rcpp_result_gen;
END_RCPP
}
// tests_run
Rcpp::List tests_run(bool showSuccess, bool debugMode);
RcppExport SEXP _nestedKriging_tests_run(SEXP showSuccessSEXP, SEXP debugModeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type showSuccess(showSuccessSEXP);
    Rcpp::traits::input_parameter< bool >::type debugMode(debugModeSEXP);
    rcpp_result_gen = Rcpp::wrap(tests_run(showSuccess, debugMode));
    return rcpp_result_gen;
END_RCPP
}
// tests_getCodeValues
Rcpp::List tests_getCodeValues(unsigned long selectedCase, std::string covType, bool forceSimpleKriging, double increaseParam);
RcppExport SEXP _nestedKriging_tests_getCodeValues(SEXP selectedCaseSEXP, SEXP covTypeSEXP, SEXP forceSimpleKrigingSEXP, SEXP increaseParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned long >::type selectedCase(selectedCaseSEXP);
    Rcpp::traits::input_parameter< std::string >::type covType(covTypeSEXP);
    Rcpp::traits::input_parameter< bool >::type forceSimpleKriging(forceSimpleKrigingSEXP);
    Rcpp::traits::input_parameter< double >::type increaseParam(increaseParamSEXP);
    rcpp_result_gen = Rcpp::wrap(tests_getCodeValues(selectedCase, covType, forceSimpleKriging, increaseParam));
    return rcpp_result_gen;
END_RCPP
}
// tests_getCaseStudy
Rcpp::List tests_getCaseStudy(unsigned long selectedCase, std::string covType);
RcppExport SEXP _nestedKriging_tests_getCaseStudy(SEXP selectedCaseSEXP, SEXP covTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned long >::type selectedCase(selectedCaseSEXP);
    Rcpp::traits::input_parameter< std::string >::type covType(covTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(tests_getCaseStudy(selectedCase, covType));
    return rcpp_result_gen;
END_RCPP
}
// looErrorsDirect
Rcpp::List looErrorsDirect(const arma::mat& X, const arma::vec& Y, const std::vector<signed long>& clusters, const std::vector<signed long>& indices, const std::string covType, const arma::vec& param, const double sd2, const std::string krigingType, const std::string tagAlgo, const long numThreadsZones, const long numThreads, const int verboseLevel, const int outputLevel, const Rcpp::IntegerVector globalOptions, const arma::vec nugget, const std::string method);
RcppExport SEXP _nestedKriging_looErrorsDirect(SEXP XSEXP, SEXP YSEXP, SEXP clustersSEXP, SEXP indicesSEXP, SEXP covTypeSEXP, SEXP paramSEXP, SEXP sd2SEXP, SEXP krigingTypeSEXP, SEXP tagAlgoSEXP, SEXP numThreadsZonesSEXP, SEXP numThreadsSEXP, SEXP verboseLevelSEXP, SEXP outputLevelSEXP, SEXP globalOptionsSEXP, SEXP nuggetSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::vector<signed long>& >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< const std::vector<signed long>& >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type covType(covTypeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const double >::type sd2(sd2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type krigingType(krigingTypeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tagAlgo(tagAlgoSEXP);
    Rcpp::traits::input_parameter< const long >::type numThreadsZones(numThreadsZonesSEXP);
    Rcpp::traits::input_parameter< const long >::type numThreads(numThreadsSEXP);
    Rcpp::traits::input_parameter< const int >::type verboseLevel(verboseLevelSEXP);
    Rcpp::traits::input_parameter< const int >::type outputLevel(outputLevelSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type globalOptions(globalOptionsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type nugget(nuggetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(looErrorsDirect(X, Y, clusters, indices, covType, param, sd2, krigingType, tagAlgo, numThreadsZones, numThreads, verboseLevel, outputLevel, globalOptions, nugget, method));
    return rcpp_result_gen;
END_RCPP
}
// estimParam
Rcpp::List estimParam(const arma::mat& X, const arma::vec& Y, const std::vector<signed long>& clusters, const std::size_t q, const std::string covType, const std::size_t niter, const arma::vec& paramStart, const arma::vec& paramLower, const arma::vec& paramUpper, const double sd2, const std::string krigingType, const std::size_t seed, const double alpha, const double gamma, const double a, const double A, const double c, const std::string tagAlgo, const long numThreadsZones, const long numThreads, const int verboseLevel, const Rcpp::IntegerVector globalOptions, const arma::vec nugget, const std::string method);
RcppExport SEXP _nestedKriging_estimParam(SEXP XSEXP, SEXP YSEXP, SEXP clustersSEXP, SEXP qSEXP, SEXP covTypeSEXP, SEXP niterSEXP, SEXP paramStartSEXP, SEXP paramLowerSEXP, SEXP paramUpperSEXP, SEXP sd2SEXP, SEXP krigingTypeSEXP, SEXP seedSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP aSEXP, SEXP ASEXP, SEXP cSEXP, SEXP tagAlgoSEXP, SEXP numThreadsZonesSEXP, SEXP numThreadsSEXP, SEXP verboseLevelSEXP, SEXP globalOptionsSEXP, SEXP nuggetSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::vector<signed long>& >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type q(qSEXP);
    Rcpp::traits::input_parameter< const std::string >::type covType(covTypeSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type paramStart(paramStartSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type paramLower(paramLowerSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type paramUpper(paramUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type sd2(sd2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type krigingType(krigingTypeSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tagAlgo(tagAlgoSEXP);
    Rcpp::traits::input_parameter< const long >::type numThreadsZones(numThreadsZonesSEXP);
    Rcpp::traits::input_parameter< const long >::type numThreads(numThreadsSEXP);
    Rcpp::traits::input_parameter< const int >::type verboseLevel(verboseLevelSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type globalOptions(globalOptionsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type nugget(nuggetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(estimParam(X, Y, clusters, q, covType, niter, paramStart, paramLower, paramUpper, sd2, krigingType, seed, alpha, gamma, a, A, c, tagAlgo, numThreadsZones, numThreads, verboseLevel, globalOptions, nugget, method));
    return rcpp_result_gen;
END_RCPP
}
